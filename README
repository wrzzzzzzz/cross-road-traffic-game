contributor: Wang Ruizhe 521370910147

#basic information
This is a cross road traffic game for users. 
In this game, users decide on themselves several features concerining the scenario. 
The way to win is to avoid traffic accidents and let all the cars pass the crossing successfully.
If cars crash into each other, the user loses without seeing the scene of the accident.
Also, users can decide the probability that a car does not stop at the traffic light, which will add risks to the game.
At the end of the game, the plates of the cars that disobey traffic rules will be printed out.

#operations
The following things are supposed to be inputted by the users themselves:

1.the width of the road
Since the width of the cars are pre-defined by the designer, the width of the road is supposed to be larger than 0.4,which is double the width of the car. 
The designer recommend 1 as a good choice.(described in pixels)

2.the time lapses of each colored light(red,orange,green),
This decision will greatly affect whether or not the user will win.
In the designer's opinion, the time lapses should be identical to those in real life, not too long or too short.
After trials and errors, the designer thinks 60 for the red light, 60 for the green light, 1 for the orange light can be a good choice.(the numbers represent time units,not the actual seconds)

3.the total number of cars
Users decide how many cars in total will appear on the roads. the total number will be randomly distributed to each lane.
Since it's happier to have the road less crowded, 10 to 15 cars can be good, but changes can be made if the time lapses are different.

4.the probability that a car does not stop at the red light
As is mentioned above, this is an option that will add risks to the game.
The larger it is, the more likely the user will lose.

#required algorithms
1.the motion of cars
Take one lane as an example
if: the number of the cars isn't zero, place the cars on their initial positions.
Also, give each of them a "possibility" to be compared later.
if: the "possibility" is smaller than p(the inputted possibility), move forward by one unit.
else:if the car is not the first at the crossroad,
           if the first car hasn't stopped or the car has moved beyond the cross, move forward by one unit.
           else, remain at its original position.
       else(if the car is the first at the crossroad),
           if the lightcolor is green, move forward by one unit
           else,remain at its original position.
after each status, the cars are deleted and drawn again.

cars on all lanes repeat this algorithm to move.

p.s. about crashing
after each time a set of cars are completely drawn
for car1 and car2
if the X of car1 at the left bottom is smaller than the X of car2 at the right bottom and the X of car1 at the right bottom is larger than the X of car2 at the left bottom
     if the Y of car1 at the left bottom is smaller than the Y of car2 at the top left corner and the Y of car1 at the top left corner is larger than the Y of car2 at the left bottom
     the cars crash, the game ends.

This process repeats 4 times, for each kind of combination.

2.the change of color of the traffic lights
lightcolor1 stands for the conditions of two lights; lightcolor2 stands for the other two.
input: the time lapses for each color
create a vector with r zeros, g ones and o twos in order, add it to itself according to the times it's needed.
The color of lightcolor1 is decided by vector(mi) and the color of lightcolor2 is decided by vector(mj).
mi starts from 1, mj starts from r+1, each stands for the element at the corresponding place in the vector.
If the number in the vector is 0,the color is red; if the number is 1, green; if the number is 2, orange.
Add 1 to mi and mj each time a set of cars are completely drawn so as to fetch the next number in the vector, the colors are then decided again and again according to the numbers.
after each status, the lights are deleted and drawn again.


3.registration plates
X is an empty vector
function X=plate(X,l)
   if l=1 then give it a letter from A to Z; store it in X
   else l=l-1;X=plate(X,l)(recall the function); provide a letter from A to Z or a number from 0 to 9; store it in X
Repeat the function as many times as the user wants(n times for example).
The permutations are stored in X.

#unique parts
1.The time unit is 0.3 seconds and the moving unit every time unit is 0.1.
2.The cars are controlled by the light across the middle cross, say, the one farther away.
3.At the end of the game, if the user loses, all the cars disappear and he will receive a "Game over!" in the command window.
If he's successful, the cars will also disappear when they all go through the cross, and no sentence will be printed out.
Whether or not he's successful, the plates of the "bad cars" that run the red lights will be printed out in the command window.
In my understanding, running orange lights are also bad behaviors, so these cars are treated the same as those who run red lights.
4.If two car accidents happen at the same time, the user will receive 2 "Game over!"s to make him clear about the heavy loss.

#files
1.p1 
the main script, add up all the functions and make certain changes

2.crossroad 
the function that draws the crossroad

3.drawing3
the function that draws the lights and cars

4.numberofcars
the function that randomly generatesthe number of cars for each lane

5.plate
the function that generates the plates

6.showthebadcars
the function that generates the plates of the "bad cars" that disobeys traffix rules

7.Changelog
record my progress

8.README